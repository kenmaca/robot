/* Written by Kevin Alexander Lee

    This is an implementation of NXT robot localization using probability and
    particle filters.

    Using the grid based map accompanying the code, the robot which initially
    has no information about its coordinate position will be able to locate itself
    and move to a specific target and destination.
  
    The NXT robot uses aspects of particle filters and probability sensing to
    determine which position it is likely at.
*/

// headings
#define NORTH 100
#define EAST 101
#define SOUTH 102
#define WEST 103
#define NORTHEAST 1000
#define SOUTHEAST 1001
#define SOUTHWEST 1002
#define NORTHWEST 1003

// colors
#define BLACK 1
#define GREEN 3
#define BLUE 2
#define WHITE 6
#define YELLOW 4
#define RED 5

// file related macros
#define FILENAME "mapdata.txt"
#define READSIZE 10

// function like macro to convert characters from files to the corresponding
// int value.
#define ASCII_TO_INT(a) a-48

// macros for the map dimensions. based on yellow grid intersections
#define GWIDTH 3
#define GHEIGHT 5

// macros for probability sensing
#define THRESHOLD
#define MATCH
#define MISMATCH

// movement
#define SPEED 20
#define WHEEL_RATIO 0.3799
#define SENSOR_PIVOT_RATIO 0.85935
#define WHEEL_PIVOT_RATIO 1.5271
#define LEFT_90 90
#define RIGHT_90 -90
#define ST_P 45
#define STEP 5

/* Represents a single particle.

    Each particle has a coordinate given by x and y and also a direction.

    The probability attached to a particle is the likelihood of it being the
    actual position and heading of the robot. This is updated based on the
    robot's surroundings.
*/
struct particle {
    int x;
    int y;
    int theta;

    // weight of a particle representing probability
    float prob;
};

/* Represents an interesection (yellow square) on the grid.

    Holds data on the surroundings of the intersection, namely coloured(or white)
    squares to the NE, SE, SW, NW of the interesection.
   
    Note that the directions are by default in terms of compass directions.
    When given a heading, the directions will change relative to the heading.
*/
struct intersection {
    int NE;
    int SE;
    int SW;
    int NW;
};

/* Samples five times from the color sensor and returns the most frequently
    occurring color.
*/
int colour() {
    int col;
    int n = 5;
    int p;
    int scans [7] = {0, 0, 0, 0, 0, 0, 0};
    unsigned int rawData[];

    int pitch [7] = {233, 466, 932, 1865, 3729, 7458, 233};

    SetSensorColorFull(IN_3);

    for (int i = 0; i < n; i++) {
        p = Sensor(IN_3);
        NumOut(10, 10, p);
        scans[p] += 1;
    }

    int max_i = 0;
    int max = 0;
    for (int i = 0; i < 7; i++) {
        if (scans[i] > max) {
            max_i = i;
            max = scans[i];
        }
    }

    col = max_i;
    PlayToneEx(pitch[col], 400, 1, false);
    return col;
}

/* Drives the robot distance millimeters. If distance is negative, the robot
   is moved backwards. The left wheel is moved forward if left is specified
   as 1, backwards as -1, and stationary as 0. Similarly for the right wheel.
   Using negative distance with a negative left/right toggle will move
   forwards (but don't do this).
   
   @param distance The millimeters that this robot should travel.
   @param left The direction that the left wheel should move in (-1, 0, or 1)
   @param right The direction that the right wheel should move in (-1, 0, or 1)
*/
sub drive(long distance, char left, char right, bool brake) {

    // both forward
    if ((left > 0) && (right > 0)) {
        RotateMotorEx(
            OUT_BC, SPEED, 
            distance / WHEEL_RATIO,
            0, true, brake
        );

    // both backward
    } else if ((left < 0) && (right < 0)) {
        RotateMotorEx(
            OUT_BC, SPEED, 
            distance / WHEEL_RATIO,
            0, true, brake
        );

    // left forward, right backwards
    } else if ((left > 0) && (right < 0)) {
        RotateMotorEx(
            OUT_BC, SPEED, 
            distance / WHEEL_RATIO,
            100, true, brake
        );

    // left backwards, right forwards
    } else if ((left < 0) && (right > 0)) {
        RotateMotorEx(
            OUT_BC, SPEED, 
            distance / WHEEL_RATIO,
            -100, true, brake
        );

    // left forward only
    } else if (left > 0) {
        RotateMotorEx(
            OUT_C, SPEED,
            distance / WHEEL_RATIO,
            0, false, brake
        );
      
    // left backwards only
    } else if (left < 0) {
        RotateMotorEx(
            OUT_C, SPEED,
            left * distance / WHEEL_RATIO,
            0, false, brake
        );

    // right forward only
    } else if (right > 0) {
        RotateMotorEx(
            OUT_B, SPEED,
            distance / WHEEL_RATIO,
            0, false, brake
        );

    // right backwards only
    } else if (right < 0) {
        RotateMotorEx(
            OUT_B, SPEED,
            right * distance / WHEEL_RATIO,
            0, false, brake
        );
    }
}

/* Pivots degrees degrees the robot on the sensor as its axis if mode is set
   to 0, or forwards pivot on a single wheel (depending on the degree) if mode
   is set to 1, or backwards pivot on a single wheel (depending on the degree)
   if mode is set to -1.
   
   @param degrees The number of degrees to pivot this robot is heading to.
   @param mode The mode (-1, 0, or 1)
*/
sub rotate(long degrees, char mode) {

    // pivot left on sensor (left backwards, right forward)
    if ((degrees > 0) && (mode == 0)) {
        drive(degrees * SENSOR_PIVOT_RATIO, -1, 1, true);

    // pivot right on sensor (left forward, right backwards)
    } else if ((degrees < 0) && (mode == 0)) {
        drive(degrees * SENSOR_PIVOT_RATIO, 1, -1, true);

    // pivot left on left wheel (right wheel forward)
    } else if ((degrees > 0) && (mode == 1)) {
        drive(degrees * WHEEL_PIVOT_RATIO, 0, 1, true);

    // pivot right on right wheel (left wheel forward)
    } else if ((degrees < 0) && (mode == 1)) {
        drive((-1) * degrees * WHEEL_PIVOT_RATIO, 1, 0, true);

    // pivot left on right wheel (left wheel backwards)
    } else if ((degrees > 0) && (mode == -1)) {
        drive(degrees * WHEEL_PIVOT_RATIO, -1, 0, true);

    // pivot right on left wheel (right wheel backwards)
    } else if ((degrees < 0) && (mode == -1)) {
        drive((-1) * degrees * WHEEL_PIVOT_RATIO, 0, -1, true);
    }
    
    Wait(2);
}

int measure(char mode, bool backtrack) {
    int initial = colour();
    int current = initial;
    int length = 0;

    while(initial == current) {
        length = length + STEP;
        current = colour();
        drive(STEP, 1, 1, false);
    }
    
    // drive back to original position
    if (backtrack) drive(-1 * length, 1, 1, true);
    return length;
}

/* Subroutine which moves the robot forward from one intersection to the next
*/
sub move_robot() {
}

/* Scans the surroundings of the robot, takes readings of the colour of 
    the 4 squares surrounding the intersection, and returns an intersection
    variable which holds the data.

    @returns struct
*/
intersection scan_surroundings() {
    intersection rsense;
    
    rotate(RIGHT_90, 1);
    rsense.NE = colour();
    rotate(LEFT_90, -1);
    rotate(LEFT_90, -1);
    rsense.SE = colour();
    rotate(RIGHT_90, 1);
    rotate(RIGHT_90, -1);
    rsense.SW = colour();
    rotate(LEFT_90, 1);
    rotate(LEFT_90, 1);
    rsense.NW = colour();
    rotate(RIGHT_90, -1);
    return rsense;
}

/* Given the original heading and a new heading, turns the robot to reflect
    the new heading

    This subroutine is used after the robot knows it's position
*/
sub change_direction(int orig, int new) {
    int change = new - orig;
    switch (change) {
        case 3:
        case -1:
            // turn left 90 degrees
            break;
        
        case -3:
        case 1:
            // turn right 90 degrees
            break;
        
        case 2:
            // 180 degree turn
            break;
    }
}

sub align(int dist) {
    rotate(90, 0);
      
    // means you turned left
    int dir = 1;
    drive(10, 1, 1, true);
    if (colour() != BLACK){
        rotate(-180, 0);
         
        // means you turned right
        dir = -1;
        drive(15, 1, 1, true);
    }

    drive(11, 1, 1, true);
    float theta = (67.5 / dist);
    float angle = 90 - theta;
    rotate(angle * dir * (-1), 0);
}

sub follow() {
    while (true) {
        int dist = measure(0, false);
        int col = colour();
        if (col == YELLOW) {
            scan_surroundings();
            int random_turn = Random(2);
            if (random_turn == 1) rotate(90 ,0);
            else rotate(-90,0);
        } else if (col == RED) rotate(180, 0);
        else align(dist);
    }
}

/* Given a start coordinate, finish coordinate, and a heading, this function
    moves the robot from the start to finish.
   
    The coordinates given are in terms of index in the map array. The x and y
    coordinates need to be extracted from that index.
   
    After the robot has finished moving, the current heading of the robot is
    returned.
   
    This function is used after the robot knows it's own position.
*/
int move_to(int s, int f, int h) {
    int sx, sy, fx, fy, tx, ty;
    int heading;
    
    // extract coordinates from given information
    sx = s / GHEIGHT;
    sy = s % GHEIGHT;
    fx = f / GHEIGHT;
    fy = f % GHEIGHT;
    
    // calculate how far to go in manhatten distances
    tx = fx - sx;
    ty = fy - sy;
    heading = h;

    return heading;
}

/* This function takes a particle and returns an updated particle after moving

    To "move" a particle is to move it forward in the direction of the particle.
    We move these particles in the same way we would move the robot.
   
    Upon reaching a boundary, the particle is turned 180 degrees around.
*/
particle move(particle p) {
    return p;
}

/* This function returns data on interesection surroundings for particles.

    Based on the map data array, we want the colour of the square at the given x
    and y coordinates in direction dir which is one of NE, SE, SW, NW.
   
    Take note that the heading given will change the percieved directions.
    For example, facing north, NE in terms of compass directions is northeast.
    Facing south however, NE in terms of compass directions is southwest.
   
    Because the robot does not know it's own heading, the particles must reflect
    this by using sensing relative to heading.
*/
int sense(intersection map[], int x, int y, int dir, int heading) {
    return -1;
}

/* The main task which initializes data and executes the update loop for 
    the particle filters.
*/
task main() {
    follow();
}
