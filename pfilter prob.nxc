/* Written by Kevin Alexander Lee

    This is an implementation of NXT robot localization using probability and
    particle filters.

    Using the grid based accompanying the code, the robot which initially
    has no information about its coordinate position will be able to locate itself
    and move to a specific target and destination.
  
    The NXT robot uses aspects of particle filters and probability sensing to
    determine which position it is likely at.
*/

// headings
#define NORTH 0
#define EAST 1
#define SOUTH 2
#define WEST 3
#define NORTHEAST 0
#define SOUTHEAST 1
#define SOUTHWEST 2
#define NORTHWEST 3

// colors
#define BLACK 1
#define GREEN 3
#define BLUE 2
#define WHITE 6
#define YELLOW 4
#define RED 5

// file related macros
#define FILENAME "mapdata.txt"
#define READSIZE 10

// function like macro to convert characters from files to the corresponding
// int value.
#define ASCII_TO_INT(a) a-48

// macros for the map dimensions. based on yellow grid intersections
#define GWIDTH 3
#define GHEIGHT 5

// macros for probability sensing
#define THRESHOLD 0.27
#define MATCH 0.9
#define MISMATCH 0.1

// probability
float ptotal = 1.0;
int colours[4];


// movement
#define SPEED 30
#define WHEEL_RATIO 0.3799
#define SENSOR_PIVOT_RATIO 0.85935
#define WHEEL_PIVOT_RATIO 1.5271
#define LEFT_90 90
#define RIGHT_90 -90
#define ST_P 45
#define STEP 5

/* Represents a single particle.

    Each particle has a coordinate given by x and y and also a direction.

    The probability attached to a particle is the likelihood of it being the
    actual position and heading of the robot. This is updated based on the
    robot's surroundings.

    Theta can be 0-3, representing N, E, S, and W, respectively.
*/
struct particle {
    int x;
    int y;
    int theta;

    // weight of a particle representing probability
    float prob;
};

particle list[GHEIGHT * GWIDTH * 4];
//particle final[GHEIGHT * GWIDTH * 4];
particle p_max;


/* Represents an interesection (yellow square) on the grid.

    Holds data on the surroundings of the intersection, namely coloured(or white)
    squares to the NE, SE, SW, NW of the interesection.
   
    Note that the directions are by default in terms of compass directions.
    When given a heading, the directions will change relative to the heading.
*/
struct intersection {
    int NE;
    int SE;
    int SW;
    int NW;
};

/* Samples five times from the color sensor and returns the most frequently
    occurring color.
*/
int colour() {
    int col;
    int n = 5;
    int p;
    int scans [7] = {0, 0, 0, 0, 0, 0, 0};
    unsigned int rawData[];

    int pitch [7] = {233, 466, 932, 1865, 3729, 7458, 233};

    SetSensorColorFull(IN_3);

    for (int i = 0; i < n; i++) {
        p = Sensor(IN_3);
        //NumOut(10, 10, p);
        scans[p] += 1;
    }

    int max_i = 0;
    int max = 0;
    for (int i = 0; i < 7; i++) {
        if (scans[i] > max) {
            max_i = i;
            max = scans[i];
        }
    }

    col = max_i;
    PlayToneEx(pitch[col], 400, 1, false);
    return col;
}

/* Drives the robot distance millimeters. If distance is negative, the robot
   is moved backwards. The left wheel is moved forward if left is specified
   as 1, backwards as -1, and stationary as 0. Similarly for the right wheel.
   Using negative distance with a negative left/right toggle will move
   forwards (but don't do this).
   
   @param distance The millimeters that this robot should travel.
   @param left The direction that the left wheel should move in (-1, 0, or 1)
   @param right The direction that the right wheel should move in (-1, 0, or 1)
*/
sub drive(long distance, char left, char right, bool brake) {

    // both forward
    if ((left > 0) && (right > 0))
        RotateMotorEx(OUT_BC, SPEED, distance / WHEEL_RATIO, 0, true, brake);

    // both backward
    else if ((left < 0) && (right < 0))
        RotateMotorEx(OUT_BC, SPEED, distance / WHEEL_RATIO, 0, true, brake);

    // left forward, right backwards
    else if ((left > 0) && (right < 0))
        RotateMotorEx(OUT_BC, SPEED, distance / WHEEL_RATIO, 100, true, brake);

    // left backwards, right forwards
    else if ((left < 0) && (right > 0))
        RotateMotorEx(OUT_BC, SPEED, distance / WHEEL_RATIO, -100, true, brake);

    // left forward only
    else if (left > 0)
        RotateMotorEx(OUT_C, SPEED, distance / WHEEL_RATIO, 0, false, brake);
      
    // left backwards only
    else if (left < 0)
        RotateMotorEx(OUT_C, SPEED, left * distance / WHEEL_RATIO, 0, false, brake);

    // right forward only
    else if (right > 0)
        RotateMotorEx(OUT_B, SPEED, distance / WHEEL_RATIO, 0, false, brake);

    // right backwards only
    else if (right < 0)
        RotateMotorEx(OUT_B, SPEED, right * distance / WHEEL_RATIO, 0, false, brake);
}

/* Pivots degrees degrees the robot on the sensor as its axis if mode is set
   to 0, or forwards pivot on a single wheel (depending on the degree) if mode
   is set to 1, or backwards pivot on a single wheel (depending on the degree)
   if mode is set to -1.
   
   @param degrees The number of degrees to pivot this robot is heading to.
   @param mode The mode (-1, 0, or 1)
*/
sub rotate(long degrees, char mode) {

    // pivot left on sensor (left backwards, right forward)
    if ((degrees > 0) && (mode == 0))
        drive(degrees * SENSOR_PIVOT_RATIO, -1, 1, true);

    // pivot right on sensor (left forward, right backwards)
    else if ((degrees < 0) && (mode == 0))
        drive(degrees * SENSOR_PIVOT_RATIO, 1, -1, true);

    // pivot left on left wheel (right wheel forward)
    else if ((degrees > 0) && (mode == 1))
        drive(degrees * WHEEL_PIVOT_RATIO, 0, 1, true);

    // pivot right on right wheel (left wheel forward)
    else if ((degrees < 0) && (mode == 1))
        drive((-1) * degrees * WHEEL_PIVOT_RATIO, 1, 0, true);

    // pivot left on right wheel (left wheel backwards)
    else if ((degrees > 0) && (mode == -1))
        drive(degrees * WHEEL_PIVOT_RATIO, -1, 0, true);

    // pivot right on left wheel (right wheel backwards)
    else if ((degrees < 0) && (mode == -1))
        drive((-1) * degrees * WHEEL_PIVOT_RATIO, 0, -1, true);
    
    // allow motor to recover for drive
    Wait(2);
}

int measure(char mode, bool backtrack) {
    int initial = colour();
    int current = initial;
    int length = 0;

    while(initial == current) {
        length = length + STEP;
        current = colour();
        drive(STEP, 1, 1, false);
    }
    
    // drive back to original position
    if (backtrack) drive(-1 * length, 1, 1, true);
    return length;
}

/* Takes a north oriented direction and heading (NE, SE, SW, NW) and converts it
    to the relative direction to current heading.

    @param dir The desired north-oriented direction.
    @param heading The current heading of the robot.
*/
int from_north_oriented(int dir, int heading) {
    return ((dir - heading) % 3);
}

/* This function returns data on interesection surroundings for particles.

    Based on the map data array, we want the colour of the square at the given x
    and y coordinates in direction dir which is one of NE, SE, SW, NW.
    Take note the heading given will change the percieved directions.
    For example, facing north, NE in terms of compass directions is northeast.
    Facing south however, NE in terms of compass directions is southwest.
   
    Because the robot does not know it's own heading, the particles must reflect
    this by using sensing relative to heading.
*/
int sense(intersection map, int x, int y, int dir, int heading) {
    int actual_dir = from_north_oriented(dir, heading);
    int reading;

    // scan NE
    if (actual_dir == 0) {
        rotate(RIGHT_90, 1);
        reading = colour();
        rotate(LEFT_90, -1);

    // scan SE
    } else if (actual_dir == 1) {
        rotate(RIGHT_90, -1);
        reading = colour();
        rotate(LEFT_90, 1);

    // scan SW
    } else if (actual_dir == 2) {
        rotate(LEFT_90, -1);
        reading = colour();
        rotate(RIGHT_90, 1);

    // scan NW
    } else {
        rotate(LEFT_90, 1);
        reading = colour();
        rotate(RIGHT_90, -1);    
    }

    return reading;
}

/* Scans the surroundings of the robot, takes readings of the colour of 
    the 4 squares surrounding the intersection, and returns an intersection
    variable which holds the data.

    @returns struct
*/
intersection scan_surroundings() {
    intersection rsense;
    
    rotate(RIGHT_90, 1);
    rsense.NE = colour();
    rotate(LEFT_90, -1);
    rotate(RIGHT_90, -1);
    rsense.SW = colour();
    rotate(LEFT_90, 1);
    rotate(LEFT_90, 1);
    rsense.NW = colour();
    rotate(RIGHT_90, -1);
    rotate(LEFT_90, -1);
    rsense.SE= colour();
    rotate(RIGHT_90, 1);
    return rsense;
}

/* Given the original heading and a new heading, turns the robot to reflect
    the new heading

    This subroutine is used after the robot knows it's position
*/
sub change_direction(int orig, int new) {
    int change = new - orig;
    switch (change) {
        case 3:
        case -1:

            // turn left 90 degrees
            rotate(LEFT_90, 0);
            break;
        
        case -3:
        case 1:

            // turn right 90 degrees
            rotate(RIGHT_90, 0);
            break;
        
        case 2:

            // 180 degree turn
            rotate(180, 0);
            break;
    }
}

/* Moves the robot step number of steps.
*/
sub move_steps(int step) {
    drive(step * STEP, 1, 1, true);
}

/* Given the number of steps taken by the robot on the road, 
    gets back on the road.
*/
sub align(int dist) {
    int dir = -1;
    //move_steps(-1);
    


    rotate(90, 0);
    move_steps(2);

    if (colour() != BLACK) {
        move_steps(-4);
        dir = -2;
        if (colour() == BLACK) {
            float theta = (25 / dist) +  ((25 / dist)*(25 / dist)*(25 / dist))/6;    // 67.5
            float angle = 90 + (theta*52.3);
            rotate(-angle, 0);
        } else {
            move_steps(2);
            rotate(45, 0);
            move_steps(2);
            dir = 1;

            if (colour() == BLACK) {
               float theta = (25 / dist) + ((25 / dist)*(25 / dist)*(25 / dist))/6;    // 67.5
               float angle = (theta*52.3);
               rotate(-(angle + 45)/2, 0);
            

            } else {
                move_steps(-2);
                rotate(90,0);
                move_steps(2);
                dir = 2;  

                float theta = ( 25 / dist) + ((25 / dist)*(25 / dist)*(25 / dist))/6;    // 67.5
                float angle = (theta*52.3);
                rotate((angle + 45)/2, 0);
            }
        }
    } else {
        float theta = (25 / dist) + ((25 / dist)*(25 / dist)*(25 / dist))/6;    // 67.5
        float angle = 90 - (theta*52.3);
        rotate(-angle, 0);
    }




}

/* Subroutine which moves the robot forward from one intersection to the next
*/
sub move_robot() {
    int old = 6;
    while (true) {
        old = colour();
        int dist = measure(0, false);
        int col = colour();

        if (col == YELLOW) return;
        else if (col == RED) rotate(180, 0);
        //else if (col == BLACK) continue;
        else if (old == BLACK) {

            align(dist);
        }
        //old = col;
    }
}

/* Given a start coordinate, finish coordinate, and a heading, this function
    moves the robot from the start to finish.
   
    The coordinates given are in terms of index in the map array. The x and y
    coordinates need to be extracted from that index.
   
    After the robot has finished moving, the current heading of the robot is
    returned.
   
    This function is used after the robot knows it's own position.
*/
int move_to(int x1, int y1, int x2, int y2, int h) {
    int i;
    
    // horizontal movement
    int dx = x2 - x1;

    // change heading to east or west
    if (dx < 0) {
        change_direction(h, 3);
        h = 3;
    } else if (dx > 0) {
        change_direction(h, 1);
        h = 1;
    }

    // now move
    for (i = 0; i < (dx < 0 ? -dx: dx); i++) {
        move_robot();
    }

    // vertical movement
    int dy = y2 - y1;

    // change heading to north or south
    if (dy > 0) {
        change_direction(h, 2);
        h = 2;
    } else if (dy < 0) {
        change_direction(h, 0);
        h = 0;
    }

    // now move
    for (i = 0; i < (dy < 0 ? -dy: dy); i++) {
        move_robot();
    }

    return h;
}

particle _pmove(particle p) {

    // move the particle
    switch(p.theta) {
        case 0:
            p.y -= 1;
            break;
        case 1:
            p.x += 1;
            break;
        case 2:
            p.y += 1;
            break;
        case 3:
            p.x -= 1;
            break;
    }

    return p;
}

/* Rotates a particle by degrees.

    @param p The particle to rotate.
    @param degrees The degrees to rotate this particle.
*/
particle protate(particle p, int degrees) {
    p.theta = (p.theta + degrees) % 4;

    return p;
}

/* This function takes a particle and returns an updated particle after moving

    To "move" a particle is to move it forward in the direction of the particle.
    We move these particles in the same way we would move the robot.
   
    Upon reaching a boundary, the particle is turned 180 degrees around.
*/
sub pmove(int i) {
    list[i] = _pmove(list[i]);

    // check bounds and reverse
    if ((list[i].x >= GWIDTH ) || (list[i].x < 0) || (list[i].y >= GHEIGHT ) || (list[i].y < 0)) {

        // reverse direction
        list[i] = protate(list[i], 2);

        // and move back
        list[i] = _pmove(list[i]);
    }

}

/* Rotates all particles by degrees.

    @param p The particles.
    @param degrees The degrees to rotate all particles.
*/
particle protate_all(particle p[], int degrees) {
    int i;
    for (i = 0; i < GWIDTH * GHEIGHT * 4; i++) {
        p[i] = protate(p[i], degrees);
    }

    return p;
}

/* Moves all particles.

    @param p The particles.
*/
sub pmove_all() {
    int i;
    for (i = 0; i < GWIDTH * GHEIGHT * 4; i++) {
        pmove(i);
    }

}

/* Normalizes all particles.

    @param p The particles.
*/

float total() {
    int i;
    float sum = 0.0;
    
    for (i = 0; i < GWIDTH * GHEIGHT * 4; i++) {
        sum += list[i].prob;
    }
    return sum;

}
sub normalize() {
    int i;
    particle p;
    
    float total_s = total();

    for (i = 0; i < GWIDTH * GHEIGHT * 4; i++) {

        list[i].prob = list[i].prob / total_s;
    }


    // reset total probability to 1
    ptotal = 1.0;
}



sub find_max_p() {
    int i = 0;
    
    for (i = 0; i < GWIDTH * GHEIGHT * 4; i++) {
        if (p_max.prob < list[i].prob) {
            p_max.x = list[i].x;
            p_max.y = list[i].y;
            p_max.theta = list[i].theta;
            p_max.prob = list[i].prob;
        }
    }

}

/* Sorts a particle list.

    @param p The particles.
    @param position The index of the particle to reorder.

    @return particle[]
*/
particle sort(particle p[], int position) {
    bool unsorted = true;
    particle current;

    while(unsorted) {

        // larger, so move up
        if ((position > 0) && (p[position].prob > p[position - 1].prob)) {
            current = p[position];
            p[position] = p[position - 1];
            p[position] = current;
            position -= 1;

        // smaller, so move down
        } else if ((position < GWIDTH * GHEIGHT * 4) && (p[position].prob < p[position + 1].prob)) {
            current = p[position];
            p[position] = p[position + 1];
            p[position] = current;
            position += 1;

        // done
        } else {
            unsorted = false;
        }
    }

    return p;
}

/* Updates a particle's probability.

    @param p The particle.
    @param probability The new probability to replace with.

    @return particle
*/
particle update_probability(particle p, float probability) {


    // keep global reference of total prob so no need for second pass
    // during normalization
    ptotal -= p.prob;
    ptotal += probability;
    p.prob = probability;

    return p;
}

/* Updates all particles at position x, y with probability.

    @param p The particles.
    @param x The x coordinate of the desired intersection.
    @param y The y coordinate of the desired intersection.
    @param probability The probability to update all matching particles to.

    @return particle[]
*/
sub update_intersection_probability(int x, int y, int heading, float probability) {
    int i;
    for (i = 0; i < GWIDTH * GHEIGHT * 4; i++) {

        if ((list[i].x == x) && (list[i].y == y) && (list[i].theta == heading)) {
            list[i] = update_probability(list[i], probability);
        }
    }
}

/* Rotates a intersection reading clockwise heading times.

    @param intersection The reading of colors.
    @param heading The number of times to rotate the intersection clockwise by.

    @return int[]
*/
sub orient(int heading) {
    int new_intersection[4], i;
    for (i = 0; i < 4; i++) {

        new_intersection[abs(i + heading) % 4] = colours[i];
    }
    colours[0] = new_intersection[0];
    colours[1] = new_intersection[1];
    colours[2] = new_intersection[2];
    colours[3] = new_intersection[3];
}

/* Given the intersection as a number, returns the corresponding x-coordinate.
*/
int to_x(int inter) {
    return inter / GHEIGHT;
}


int to_y(int inter) {
    return inter % GHEIGHT;
}





/* The main task which initializes data and executes the update loop for 
    the particle filters.
*/
task main() {
    float robp = 0.0;
    intersection rsense;
    intersection map[GWIDTH * GHEIGHT];
    int guess[3];

    //particle list[GWIDTH * GHEIGHT * 4]; /* list of particles */
    int psense[4]; /* holds data on a particle's surroundings */

    int i, j; /* variables for loop counters */
    int hits, misses; /* keeps track of how many of a particle's
                      surroundings match the robot's */
                      
    i = (0 == 1) + (4 == 4);
    
    NumOut(10,10,i);
    Wait(20000);
    float maxprob, totalprob;

    byte fd, charat;         /* variables for file descriptors and characters */
    string line;
    int target, dest, target_x, target_y, dest_x, dest_y; /* records the target and destination coordinates for use
                      after finding the robot's position */
    PlayToneEx(Random(1000) + 200, 400, 3, FALSE);
    /* sensor initialization */
    //SetSensorColorFull(IN_1);

    /* initialize the particle list, each coordinate has 4 particles, one for each direction */
    for (i = 0; i < GWIDTH*GHEIGHT*4; i = i + 4) {
        list[i].x=(i/4)%GWIDTH;
        list[i].y=i/(4*GWIDTH);
        list[i].theta = NORTH;
        list[i].prob = 1.0/(GWIDTH*GHEIGHT*4);
        list[i+1].x=(i/4)%GWIDTH;
        list[i+1].y=i/(4*GWIDTH);
        list[i+1].theta = SOUTH;
        list[i+1].prob = 1.0/(GWIDTH*GHEIGHT*4);
        list[i+2].x=(i/4)%GWIDTH;
        list[i+2].y=i/(4*GWIDTH);
        list[i+2].theta = EAST;
        list[i+2].prob = 1.0/(GWIDTH*GHEIGHT*4);
        list[i+3].x=(i/4)%GWIDTH;
        list[i+3].y=i/(4*GWIDTH);
        list[i+3].theta = WEST;
        list[i+3].prob = 1.0/(GWIDTH*GHEIGHT*4);
        
    }

    PlayToneEx(Random(1000) + 200, 400, 3, FALSE);
    fd = fopen(FILENAME, "r");
    /* read as many lines as there are squares on the grid */
    for (i=0; i < GWIDTH*GHEIGHT; i++){
        fgets(line, READSIZE, fd);
        /* parse each line into the coresponding directions and store them in
          the map data array */
        for (j = 0; j < 7; j = j + 2){
            charat = StrIndex(line, j);
            switch (j){
                case 0:
                    map[i].NE = ASCII_TO_INT(charat);
                    break;
                case 2:
                    map[i].SE = ASCII_TO_INT(charat);
                    break;
                case 4:
                    map[i].SW = ASCII_TO_INT(charat);
                    break;
                case 6:
                    map[i].NW = ASCII_TO_INT(charat);
                    break;
            }
        }
    }

    /* read information about the target which should be following the map data */
    fgets(line, READSIZE, fd);
    charat = StrIndex(line,0);
    target_x = ASCII_TO_INT(charat);
    target = target_x*GHEIGHT; // add x coordinate calculation
    charat = StrIndex(line,2);
    target_y =  ASCII_TO_INT(charat);
    target = target + target_y; // add y coordinate



    /* read information about the destination which sould be following the target data */
    fgets(line, READSIZE, fd);
    charat = StrIndex(line,0);
    dest_x = ASCII_TO_INT(charat);
    dest = dest_x*GHEIGHT; // add x coordinate calculation
    charat = StrIndex(line,2);
    dest_y = ASCII_TO_INT(charat);
    dest = dest + dest_y; // add y coordinate

    fclose(fd);
    particle final;
    intersection building, p_inter;
    int p, p_NE, p_NW, p_SE, p_SW, k, r, e;
    float newp;
    p_max = list[0];
    p_max.prob = 0.0;
    
    
    while(p_max.prob < THRESHOLD) {
        move_robot();
        pmove_all();
        building = scan_surroundings();
        for (i = 0; i < GHEIGHT * GWIDTH * 4; i++) {

            k = (list[i].x) * GHEIGHT + list[i].y;

            p_inter = map[k];
            colours[0] = p_inter.NE;
            colours[1] = p_inter.SE;
            colours[2] = p_inter.SW;
            colours[3] = p_inter.NW;
            

            // probability model

            orient(list[i].theta);
            if (
                (building.NE == colours[0])
                && (building.SE == colours[1])
                && (building.SW == colours[2])
                && (building.NW == colours[3])
            ) {
                list[i].prob = list[i].prob + MATCH;
            }
            /*else if (
                (building.NE != colours[0])
                && (building.SE != colours[1])
                && (building.SW != colours[2])
                && (building.NW != colours[3])
            ) { list[i].prob =  list[i].prob;
            } else {list[i] = list[i] + ((
                (building.NE == colours[0])
                + (building.SE == colours[1])
                + (building.SW == colours[2])
                + (building.NW == colours[3])
            ))*MISMATCH; }   */
            
            
            



        }
        normalize();
        find_max_p();

        robp = p_max.prob;
    }


    PlayToneEx(Random(1000) + 200, 400, 3, FALSE);

    p_max.theta = move_to(p_max.x, p_max.y, target_x, target_y, p_max.theta);
    p_max.x = target_x; p_max.y = target_y;
    p_max.theta = move_to(p_max.x, p_max.y, dest_x, dest_y, p_max.theta);
    PlayToneEx(Random(1000) + 200, 400, 3, FALSE);
    PlayToneEx(Random(1000) + 200, 400, 3, FALSE);
    Wait(500);
}
